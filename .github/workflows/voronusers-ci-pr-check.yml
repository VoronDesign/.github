---
name: voronusers_ci_pr_check
on:
    workflow_call:
env:
    VORON_TOOLKIT_OUTPUT_DIR: ${{ github.workspace }}/workflow_output
    VORON_TOOLKIT_INPUT_DIR: ${{ github.workspace }}/printer_mods
    VORON_TOOLKIT_GH_STEP_SUMMARY: true
    VORON_TOOLKIT_VERBOSE: true
    GITHUB_EVENT_CONTEXT: ${{ toJson(github.event) }}
jobs:
    voron_ci_skip:
        if: ${{ github.event.action != 'labeled' || !contains( github.event.pull_request.labels.*.name, 'Ready for CI')}}
        runs-on: ubuntu-latest
        steps:
          - name: Save Github Event Payload üíæ
            id: save-payload
            run: |
                mkdir -p ${{ env.VORON_TOOLKIT_OUTPUT_DIR }}
                echo -n "$GITHUB_EVENT_CONTEXT" >> ${{ env.VORON_TOOLKIT_OUTPUT_DIR }}/event.json
        # Upload Artifact
          - name: Upload build artifacts üì¶
            uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
            with:
                name: ci_output
                path: ${{ env.VORON_TOOLKIT_OUTPUT_DIR }}
    voron_ci_run:
        if: ${{ github.event.action == 'labeled' && contains( github.event.pull_request.labels.*.name, 'Ready for CI')}}
        runs-on: ubuntu-latest
        continue-on-error: true
        steps:
        # Check out files, separate with newlines to catch whitespace in filenames
          - id: changed-files
            name: Get changed files üîÄ
            uses: tj-actions/changed-files@a21a533a0c244a27daac02f9dc6fcf8aeb996154
            with:
                separator: "\n"
        # Prepare patterns for sparse checkout
          - name: Prepare Sparse Checkout üßπ
            id: sanitize_file_list
            uses: docker://ghcr.io/vorondesign/voron_toolkit_docker:v3
            env:
                SPARSE_CHECKOUT_HELPER_INPUT: ${{ steps.changed-files.outputs.all_changed_files }}
                SPARSE_CHECKOUT_HELPER_MOD_SUBFOLDER: printer_mods
            with:
                args: prepare-sparse-checkout
        # Perform a sparse checkout, checking out only the files of the PR
          - name: Perform sparse checkout ‚Ü™Ô∏è
            uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
            with:
                ref: ${{ github.ref }}
                path: ${{ github.workspace }}
                sparse-checkout: ${{ steps.sanitize_file_list.outputs.SPARSE_CHECKOUT_HELPER_OUTPUT }}
                sparse-checkout-cone-mode: false
        # Save the event payload (do this after the sparse checkout to avoid the file being cleaned)
          - name: Save Github Event Payload üíæ
            id: save-payload
            run: |
                mkdir -p ${{ env.VORON_TOOLKIT_OUTPUT_DIR }}
                echo -n "$GITHUB_EVENT_CONTEXT" >> ${{ env.VORON_TOOLKIT_OUTPUT_DIR }}/event.json
        # Run whitespace/licenses/file sizes check based on files in the test directory
          - name: Check files for whitespace/licenses/file sizes üîç
            uses: docker://ghcr.io/vorondesign/voron_toolkit_docker:v3
            continue-on-error: true
            env:
                FILE_CHECKER_IGNORE_WARNINGS: true
                FILE_CHECKER_CHECK_LICENSE: true
                FILE_CHECKER_CHECK_FILE_SIZE_MB: 2
            with:
                args: check-files
        # Check the mod structure
          - name: Check correct mod/file structure üîç
            uses: docker://ghcr.io/vorondesign/voron_toolkit_docker:v3
            continue-on-error: true
            env:
                MOD_STRUCTURE_CHECKER_IGNORE_WARNINGS: true
            with:
                args: check-mod-structure
        # Check markdown links
          - name: Check markdown files üîç
            uses: docker://ghcr.io/vorondesign/voron_toolkit_docker:v3
            continue-on-error: true
            env:
                MARKDOWN_LINK_CHECKER_IGNORE_WARNINGS: true
            with:
                args: check-markdown-files
        # Run the corruption checker
          - name: Check for STL corruption üîç
            uses: docker://ghcr.io/vorondesign/voron_toolkit_docker:v3
            continue-on-error: true
            env:
                CORRUPTION_CHECKER_IGNORE_WARNINGS: true
            with:
                args: check-stl-corruption
        # Run the rotation checker
          - name: Check for incorrect STL rotation üîç
            uses: docker://ghcr.io/vorondesign/voron_toolkit_docker:v3
            continue-on-error: true
            env:
                ROTATION_CHECKER_IGNORE_WARNINGS: true
                ROTATION_CHECKER_IMAGEKIT_ENDPOINT: https://ik.imagekit.io/vorondesign
                ROTATION_CHECKER_IMAGEKIT_SUBFOLDER: ci_${{github.event.number}}
            with:
                args: check-stl-rotation
        # Generate a README
          - name: Generate README üìí
            uses: docker://ghcr.io/vorondesign/voron_toolkit_docker:v3
            continue-on-error: true
            env:
                README_GENERATOR_MARKDOWN: false
                README_GENERATOR_JSON: false
            with:
                args: generate-readme
        # Upload Artifact
          - name: Upload build artifacts üì¶
            uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
            with:
                name: ci_output
                path: ${{ env.VORON_TOOLKIT_OUTPUT_DIR }}
