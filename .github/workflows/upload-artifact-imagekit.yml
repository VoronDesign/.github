---
name: Upload Images generated by VoronCI to imagekit
on:
  workflow_call:
    inputs:
      artifact_name:
        description: Name of the artifact where images reside
        type: string
        required: true
      images_subfolder:
        description: Image subfolder, within the artifact, where images reside
        type: string
        required: true
      imagekit-url-endpoint:
        required: true
        type: string
        description: IMAGEKIT.io endpoint to push images to
    secrets:
      IMAGEKIT_PRIVATE_KEY:
        required: true
      IMAGEKIT_PUBLIC_KEY:
        required: true
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout workflows repo ↪️
          # Check out .github repo to gain access to scripts
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          repository: VoronDesign/.github
          persist-credentials: false
      - name: Setup python 3.11 🐍
        id: python311
        uses: actions/setup-python@bd6b4b6205c4dbad673328db7b31b7fab9e241c0
        with:
          python-version: '3.11'
      - name: Install python packages 🛠️
          # Install required packages
        id: pip-install-packages
        run: |
          pip install imagekitio
      - name: Download artifact
          # Download the artifact that was stored during the PR CI process
          # This file contains the action_run_id and the pull_request number
          # which are often not accessible from contexts
        uses: actions/github-script@v6
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "${{ inputs.artifact_name }}"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id,
                archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/artifact/${{ inputs.artifact_name }}.zip', Buffer.from(download.data));
      - run: unzip ${{github.workspace}}/artifact/${{ inputs.artifact_name }}.zip
      - name: Upload Images 📃
        id: upload-images
          # Upload images contained in the image artifact
        env:
          IMAGEKIT_PRIVATE_KEY: ${{ secrets.IMAGEKIT_PRIVATE_KEY }}
          IMAGEKIT_PUBLIC_KEY: ${{ secrets.IMAGEKIT_PUBLIC_KEY }}
          IMAGEKIT_URL_ENDPOINT: ${{ inputs.imagekit-url-endpoint }}
        run: |
          python3 ${{ github.workspace }}/scripts/upload_images.py --input_folder=${{github.workspace}}/artifact/${{ inputs.images_subfolder}}